/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdvancedImport } from './routes/advanced'
import { Route as IndexImport } from './routes/index'
import { Route as MealsIndexImport } from './routes/meals.index'
import { Route as MealsMealIdImport } from './routes/meals.$mealId'

// Create/Update Routes

const AdvancedRoute = AdvancedImport.update({
  id: '/advanced',
  path: '/advanced',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MealsIndexRoute = MealsIndexImport.update({
  id: '/meals/',
  path: '/meals/',
  getParentRoute: () => rootRoute,
} as any)

const MealsMealIdRoute = MealsMealIdImport.update({
  id: '/meals/$mealId',
  path: '/meals/$mealId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/advanced': {
      id: '/advanced'
      path: '/advanced'
      fullPath: '/advanced'
      preLoaderRoute: typeof AdvancedImport
      parentRoute: typeof rootRoute
    }
    '/meals/$mealId': {
      id: '/meals/$mealId'
      path: '/meals/$mealId'
      fullPath: '/meals/$mealId'
      preLoaderRoute: typeof MealsMealIdImport
      parentRoute: typeof rootRoute
    }
    '/meals/': {
      id: '/meals/'
      path: '/meals'
      fullPath: '/meals'
      preLoaderRoute: typeof MealsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/advanced': typeof AdvancedRoute
  '/meals/$mealId': typeof MealsMealIdRoute
  '/meals': typeof MealsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/advanced': typeof AdvancedRoute
  '/meals/$mealId': typeof MealsMealIdRoute
  '/meals': typeof MealsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/advanced': typeof AdvancedRoute
  '/meals/$mealId': typeof MealsMealIdRoute
  '/meals/': typeof MealsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/advanced' | '/meals/$mealId' | '/meals'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/advanced' | '/meals/$mealId' | '/meals'
  id: '__root__' | '/' | '/advanced' | '/meals/$mealId' | '/meals/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdvancedRoute: typeof AdvancedRoute
  MealsMealIdRoute: typeof MealsMealIdRoute
  MealsIndexRoute: typeof MealsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdvancedRoute: AdvancedRoute,
  MealsMealIdRoute: MealsMealIdRoute,
  MealsIndexRoute: MealsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/advanced",
        "/meals/$mealId",
        "/meals/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/advanced": {
      "filePath": "advanced.tsx"
    },
    "/meals/$mealId": {
      "filePath": "meals.$mealId.tsx"
    },
    "/meals/": {
      "filePath": "meals.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
